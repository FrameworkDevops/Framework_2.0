node
  {
    stage('Cloning git repository')
    {
        checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'PerBuildTag']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/FrameworkDevops/Framework_2.0.git']]])
    }
    
    stage('check for existing container and  images')
    {
        
        sh label: '', script: '''
echo "container jenkins"

name='jenkins'

if [[ $(docker ps --filter "name=^/$name$" --format '{{.Names}}') == $name ]]; then
docker stop $name
echo "container $name stopped"

docker rm $name
echo "container $name removed"
else

echo "$name container not present!"

fi

#-----------------------------------
img='frameworkdevops/framework_1.0:jenkins'

if [[ ! -z $(docker images -q $img) ]]; then

docker rmi $img

echo "$img removed!!"
else

echo "$img not present"

fi

'''


        
    }

    stage('Building docker image for jenkins')
    {
        sh 'chmod +x ${WORKSPACE}/jenkins_customized/rootfs/*'
        sh 'docker build -t frameworkdevops/framework_1.0:jenkins ${WORKSPACE}/jenkins_customized'
        
        withCredentials([string(credentialsId: 'dockerpwd', variable: 'dockerpwd')]) 
        {
         
         sh 'docker login -u frameworkdevops -p ${dockerpwd}'
            
        }
        
        // sh 'docker push frameworkdevops/framework_1.0:jenkins'
    }
     stage ("container execution"){
         
        sh 'docker run -d -p 9090:8080 --name=jenkins -v ${JOB_NAME}_jenkins:/bitnami/jenkins/jenkins_home frameworkdevops/framework_1.0:jenkins'
        
     }
    
    
  }
