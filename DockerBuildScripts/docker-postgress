node
  {
   stage('Cloning git repository')
   {
       checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'PerBuildTag']], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/FrameworkDevops/Framework_2.0.git']]])
   }
    
    stage('check for existing images')
    {
        
        sh label: '', script: '''
        
        name='postgress'

echo "container $name"

if [[ $(docker ps --filter "name=^/$name$" --format '{{.Names}}') == $name ]]; then
docker stop $name
echo "container $name stopped"

docker rm $name
echo "container $name removed"
else

echo "$name container not present!"

fi

#-----------------------------------

img='frameworkdevops/framework_1.0:postgress'

if [[ ! -z $(docker images -q $img) ]]; then

docker rmi $img

echo "$img removed!!"
else

echo "$img not present"

fi
        '''
    }

    stage('Building docker image for postgress')
    {
       sh 'docker build -t frameworkdevops/framework_1.0:postgress ${WORKSPACE}/postgres-customized'
       
        withCredentials([string(credentialsId: 'dockerpwd', variable: 'dockerpwd')]) 
        {
         
         sh 'docker login -u frameworkdevops -p ${dockerpwd}'
            
        }
        
         sh 'docker push frameworkdevops/framework_1.0:postgress'
    }
    stage('container execution'){
        
    
    sh 'docker run -d --name=postgress -p 5050:5050 -d frameworkdevops/framework_1.0:postgress'
  }
  }
